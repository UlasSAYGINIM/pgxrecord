{{- $G := . -}}
package {{ .PackageName }}

import (
	"encoding/json"

	"github.com/jackc/pgsql"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgxrecord"
	"github.com/jackc/pgtype"
	pgtypeuuid "github.com/jackc/pgtype/ext/gofrs-uuid"
	"github.com/gofrs/uuid"
	shopspring "github.com/jackc/pgtype/ext/shopspring-numeric"
	"github.com/shopspring/decimal"
)

type {{ .StructName }} struct {
{{ range .Columns }}	{{ .FieldName }} {{ .FieldType }}
{{ end }}}

func ({{ .ReceiverName }} *{{ .StructName }}) FieldByColumnName(name string) (pgxrecord.Field, error) {
	switch name {
	{{ range .Columns -}}
	case `{{ .ColumnName }}`:
		return &{{ $G.ReceiverName }}.{{ .FieldName }}, nil
	{{ end -}}
	default:
		return nil, errors.New("unknown attribute")
	}
}

func ({{ .ReceiverName }} *{{ .StructName }}) AttrMap() pgxrecord.AttrMap {
	m := make(pgxrecord.AttrMap, {{ len .Columns }})

	var value interface{}

	{{ range .Columns }}
	value = {{ $G.ReceiverName }}.{{ .FieldName }}.Get()
	if value != pgtype.Undefined {
		m[`{{ .ColumnName }}`] = value
	}
	{{ end }}

	return m
}

func ({{ .ReceiverName }} *{{ .StructName }}) MarshalJSON() ([]byte, error) {
	return json.Marshal({{ .ReceiverName }}.AttrMap())
}

func ({{ .ReceiverName }} *{{ .StructName }}) InsertStatement() (*pgsql.InsertStatement, error) {
	columns := make([]string, 0, {{ len .Columns }})
	values := make([]interface{}, 0, {{ len .Columns }})

	{{ range .Columns }}
	if {{ $G.ReceiverName }}.{{ .FieldName }}.Status != pgtype.Undefined {
		columns = append(columns, `{{ .ColumnName }}`)
		values = append(values, {{ $G.ReceiverName }}.{{ .FieldName }})
	}
	{{ end }}

	if len(columns) == 0 {
		return nil, errors.New("no attributes to insert")
	}

	vs := pgsql.Values().Row(values...)
	stmt := pgsql.Insert(`{{ .TableName }}`).Columns(columns...).Values(vs)

	{{ range .InsertReturningColumns }}
	stmt.Returning(`{{ .ColumnName }}`)
	{{- end }}

	return stmt, nil
}

{{ if .InsertReturningColumns }}
func ({{ .ReceiverName }} *{{ .StructName }}) InsertScan(rows pgx.Rows) error {
	return rows.Scan(
		{{ range .InsertReturningColumns -}}
		&{{ $G.ReceiverName }}.{{ .FieldName }},
		{{ end -}}
	)
}
{{ end }}

func ({{ .ReceiverName }} *{{ .StructName }}) UpdateStatement() (*pgsql.UpdateStatement, error) {
	assignments := make(pgsql.Assignments, 0, {{ len .Columns }})

	{{ range .Columns }}
	{{ if not .PrimaryKey }}
	if {{ $G.ReceiverName }}.{{ .FieldName }}.Status != pgtype.Undefined {
		assignments = append(assignments, &pgsql.Assignment{Left: pgsql.Ident{`{{ .ColumnName }}`}, Right: pgsql.Param{Value: {{ $G.ReceiverName }}.{{ .FieldName }}}})
	}
	{{ end }}
	{{ end }}

	if len(assignments) == 0 {
		return nil, errors.New("no attributes to update")
	}

	stmt := pgsql.Update(`{{ .TableName }}`).Set(assignments)
	{{ range .PrimaryKeyColumns -}}
	if {{ $G.ReceiverName }}.{{ .FieldName }}.Status != pgtype.Present {
		return nil, errors.New("primary key not set")
	}
	stmt.Where("{{ .ColumnName }}=?", {{ $G.ReceiverName }}.{{ .FieldName }})
	{{ end -}}

	return stmt, nil
}

func ({{ .ReceiverName }} *{{ .StructName }}) DeleteStatement() (*pgsql.DeleteStatement, error) {
	stmt := pgsql.Delete(`{{ .TableName }}`)
	{{ range .PrimaryKeyColumns -}}
	if {{ $G.ReceiverName }}.{{ .FieldName }}.Status != pgtype.Present {
		return nil, errors.New("primary key not set")
	}
	stmt.Where("{{ .ColumnName }}=?", {{ $G.ReceiverName }}.{{ .FieldName }})
	{{ end -}}

	return stmt, nil
}

func ({{ .ReceiverName }} *{{ .StructName }}) SelectStatement() (*pgsql.SelectStatement, error) {
	return pgsql.Select(`{{ range $i, $c := .SelectColumns }}{{ if gt $i 0 }}, {{ end }}{{ $G.TableName}}.{{ .ColumnName }}{{ end }}`).From(`{{ .TableName }}`), nil
}

func ({{ .ReceiverName }} *{{ .StructName }}) SelectScan(rows pgx.Rows) error {
	return rows.Scan(
		{{ range .SelectColumns -}}
		&{{ $G.ReceiverName }}.{{ .FieldName }},
		{{ end }})
}

type {{ .StructName }}Collection []*{{ .StructName }}

func (c *{{ .StructName }}Collection) NewRecord() pgxrecord.Selector {
	return &{{ .StructName }}{}
}

func (c *{{ .StructName }}Collection) Append(s pgxrecord.Selector) {
	*c = append(*c, s.(*{{ .StructName }}))
}
