// Package pgxrecord is a tiny framework for CRUD operations and data mapping.
package pgxrecord

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgsql"
	"github.com/jackc/pgx/v4"
)

type Queryer interface {
	Query(ctx context.Context, sql string, optionsAndArgs ...interface{}) (pgx.Rows, error)
}

type Op int8

const (
	unspecifiedOp Op = iota
	InsertOp
	UpdateOp
)

type BeforeSaver interface {
	// BeforeSave returns an error if the operation should be canceled. op is either InsertOp or UpdateOp.
	BeforeSave(op Op) error
}

type Inserter interface {
	// InsertQuery returns the sql and query arguments used to insert the record.
	InsertQuery() (sql string, queryArgs []interface{})
}

type InsertScanner interface {
	// InsertScan scans the row generated by the returning clause into the record.
	InsertScan(pgx.Rows) error
}

type Updater interface {
	// UpdateQuery returns the sql and query arguments used to update the record.
	UpdateQuery() (sql string, queryArgs []interface{})
}

type UpdateScanner interface {
	// UpdateScan scans the row generated by the returning clause into the record.
	UpdateScan(pgx.Rows) error
}

type Deleter interface {
	// UpdateQuery returns the sql and query arguments used to delete the record.
	DeleteQuery() (sql string, queryArgs []interface{})
}

type DeleteScanner interface {
	// DeleteScan scans the row generated by the returning clause into the record.
	DeleteScan(pgx.Rows) error
}

type Selector interface {
	// SelectStatement returns a select statement that selects a record.
	SelectStatement() *pgsql.SelectStatement

	// SelectScan scans the current row into the record.
	SelectScan(pgx.Rows) error
}

type SelectCollection interface {
	// NewRecord allocates and returns a new record that can be appended to this collection.
	NewRecord() Selector

	// Append appends record to the collection.
	Append(record Selector)
}

type PgErrorMapper interface {
	// MapPgError converts a *pgconn.PgError to another type of error. For example, a unique constraint violation may be
	// converted to an application specific validation error.
	MapPgError(*pgconn.PgError) error
}

func tryMapPgError(record interface{}, err error) error {
	if mapper, ok := record.(PgErrorMapper); ok {
		if pgErr, ok := err.(*pgconn.PgError); ok {
			return mapper.MapPgError(pgErr)
		}
	}

	return err
}

type multipleRowsError struct {
	rowCount int64
}

func (e *multipleRowsError) Error() string {
	return fmt.Sprintf("expected 1 row got %d", e.rowCount)
}

type notFoundError struct{}

func (e *notFoundError) Error() string {
	return "not found"
}

// NotFound returns true if err is a not found error.
func NotFound(err error) bool {
	_, ok := err.(*notFoundError)
	return ok
}

// Insert inserts record into db. If record implements BeforeSaver then BeforeSave will be called. If an error is
// returned the Insert is aborted.
func Insert(ctx context.Context, db Queryer, record Inserter) error {
	if bs, ok := record.(BeforeSaver); ok {
		err := bs.BeforeSave(InsertOp)
		if err != nil {
			return err
		}
	}

	sql, queryArgs := record.InsertQuery()
	var f scanFunc
	if record, ok := record.(InsertScanner); ok {
		f = func(rows pgx.Rows) error { return record.InsertScan(rows) }
	}

	return queryOne(ctx, db, record, sql, queryArgs, f)
}

// Update updates record in db. If record implements BeforeSaver then BeforeSave will be called. If an error is
// returned the Update is aborted. If the update query does not affect exactly one record an error will be returned.
func Update(ctx context.Context, db Queryer, record Updater) error {
	if bs, ok := record.(BeforeSaver); ok {
		err := bs.BeforeSave(UpdateOp)
		if err != nil {
			return err
		}
	}

	sql, queryArgs := record.UpdateQuery()

	var f scanFunc
	if record, ok := record.(UpdateScanner); ok {
		f = func(rows pgx.Rows) error { return record.UpdateScan(rows) }
	}

	return queryOne(ctx, db, record, sql, queryArgs, f)
}

// Delete deletes record in db. If the delete query does affect exactly one record an error will be returned.
func Delete(ctx context.Context, db Queryer, record Deleter) error {
	sql, queryArgs := record.DeleteQuery()

	var f scanFunc
	if record, ok := record.(DeleteScanner); ok {
		f = func(rows pgx.Rows) error { return record.DeleteScan(rows) }
	}

	return queryOne(ctx, db, record, sql, queryArgs, f)
}

// SelectOne selects a single record from db into record. It merges scope into the SQL statement. An error will be
// returned if no rows are found. Check for this case with the NotFound function. If multiple rows are selected an
// error will be returned.
func SelectOne(ctx context.Context, db Queryer, record Selector, scope *pgsql.SelectStatement) error {
	stmt := record.SelectStatement()
	if scope != nil {
		stmt.Merge(scope)
	}

	sql, args := pgsql.Build(stmt)

	return queryOne(ctx, db, record, sql, args, record.SelectScan)
}

type scanFunc func(rows pgx.Rows) error

func queryOne(ctx context.Context, db Queryer, record interface{}, sql string, queryArgs []interface{}, scan scanFunc) error {
	rows, err := db.Query(ctx, sql, queryArgs...)
	if err != nil {
		return err
	}

	if rows.Next() && scan != nil {
		err = scan(rows)
		if err != nil {
			rows.Close()
			return tryMapPgError(record, err)
		}
	}
	rows.Close()
	if rows.Err() != nil {
		return tryMapPgError(record, rows.Err())
	}

	rowsAffected := rows.CommandTag().RowsAffected()
	if rowsAffected == 0 {
		return &notFoundError{}
	}
	if rowsAffected > 1 {
		return &multipleRowsError{rowCount: rowsAffected}
	}

	return nil
}

// SelectAll selects records from db into collection. It merges scope onto the SQL statement.
func SelectAll(ctx context.Context, db Queryer, collection SelectCollection, scope *pgsql.SelectStatement) error {
	record := collection.NewRecord()
	stmt := record.SelectStatement()
	if scope != nil {
		stmt.Merge(scope)
	}

	sql, args := pgsql.Build(stmt)

	rows, err := db.Query(ctx, sql, args...)
	if err != nil {
		return tryMapPgError(record, err)
	}

	rowCount := 0
	for rows.Next() {
		if rowCount > 0 {
			record = collection.NewRecord()
		}
		err := record.SelectScan(rows)
		if err != nil {
			return err
		}

		collection.Append(record)
		rowCount++
	}
	if rows.Err() != nil {
		return tryMapPgError(record, rows.Err())
	}

	return nil
}
